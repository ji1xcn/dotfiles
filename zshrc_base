# echo 'eval $(/opt/homebrew/bin/brew shellenv)' >> /Users/yuti/.zprofile
# eval $(/opt/homebrew/bin/brew shellenv)
source homebrew/path.zsh

#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Customize to your needs...

export ZPLUG_HOME=/opt/homebrew/opt/zplug
source $ZPLUG_HOME/init.zsh

# zsh framework
zplug "sorin-ionescu/prezto"

# prezto plugins
zplug "modules/environment", from:prezto
zplug "modules/terminal", from:prezto
zplug "modules/editor", from:prezto
zplug "modules/history", from:prezto
zplug "modules/directory", from:prezto
zplug "modules/spectrum", from:prezto
zplug "modules/utility", from:prezto
zplug "modules/completion", from:prezto
zplug "modules/prompt", from:prezto
zplug "modules/homebrew", from:prezto
zplug "modules/ruby", from:prezto
zplug "modules/git", from:prezto

# suggest history
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "b4b4r07/enhancd", use:init.sh

#zstyle thete
zstyle ':prezto:module:prompt' theme 'powerlevel10k'
# zstyle ':prezto:load' pmodule 'directory'

if ! zplug check --verbose; then
  printf 'Install? [y/N]: '
  if read -q; then
    echo; zplug install
  fi
fi
zplug load --verbose

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

clear

# promt
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  echo "NVIM Terminal mode"
  prompt pure
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# select arm64 or x86_64
# 動かないからやめる
#
# echo "use Rosetta 2? [y/N]"; read -q yn;
# case "$yn" in
#   [yY])
#     echo; arch -x86_64 zsh
#     ;;
#   [nN*])
# esac


export PATH="/opt/homebrew/opt/libarchive/bin:$PATH"
export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"

export PYENV_ROOT="$HOME/.anyenv/envs/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     else
#         export PATH="/Users/yuti/.anyenv/envs/pyenv/versions/miniforge3-4.9.2/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

alias switchx86='arch -x86_64 zsh'
alias switcharm='arch -arm64 zsh'

function resetLaunchPad(){
   defaults write com.apple.dock ResetLaunchPad -bool true;
   killall Dock;
}
alias resetLaunchPad=resetLaunchPad

alias brewx86='arch -x86_64 /usr/local/bin/brew'
# export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
# export LDFLAGS="-L/usr/local/opt/zlib/lib"
# export CPPFLAGS="-I/usr/local/opt/zlib/include"

alias pip-upgrade-all="pip list -o | tail -n +3 | awk '{ print \$1 }' | xargs pip install -U"

